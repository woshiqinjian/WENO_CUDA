module cuda_parallel

    use cudafor

    implicit none
    integer ( kind (0) ) , parameter   ::   dp = kind ( 0.0d0 ) , & !< double precision
                                            sp = kind ( 0.0   ) , & !< simple precision
                                            ip = kind ( 0     )     !< integer precision
    integer (ip)                                  :: device !< device
    integer (ip) , parameter :: device_default = 0  !< default device number

    interface end_cuda
        module procedure end_cuda
        module procedure abort_cuda
    end interface end_cuda


    contains

!> universial error check subroutine
    subroutine check(code_statue)
    
        integer,intent(in) :: code_statue
        character(len=100) :: error_string
    
        if (error_code /=cudaSuccess) then
            error_string=cudaGetErrorString (code_statue)
            print *, "CUDA ERROR: "
            print *, "      File:               " , __FILE__
            print *, "      Line:               " , __LINE__
            print *, "      Error Code:         " , trim(error_code)
            print *, "      Error Text:         " , trim(error_string)
            stop
        end if
    
    end subroutine check
    
!> cuda initialization subroutine
    subroutine initialize_cuda()

        integer :: device_count
        ! Get the number of CUDA devices
        call check(cudaGetDeviceCount(device_count))

        ! Loop over devices and set the first one that is available
        call check(cudaSetDevice(device_count))
        device = device_count

    end subroutine initialize_cuda
 
!> cuda abort subroutine, not need message
    subroutine end_cuda

        call check(cudaDeviceReset())

    end subroutine disable_cuda

!> cuda abort subroutine, need message
    subroutine abort_cuda(Message)

        character(len=*), intent(in) :: Message

        print *, Message
        call end_cuda()
        stop

    end subroutine abort_cuda

!> cuda memory allocation subroutine

end module cuda_parallel  