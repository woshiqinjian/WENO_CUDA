!------------------------------------------------------------------------------
! PROGRAM WIND: Compressible Turbulent Boundary Layer code
!------------------------------------------------------------------------------
!> \brief Solver.
!!
!! Contains the main program.
!!
!!   Input files:\n
!!     * grid.dat       the computational domain with the mesh and boundary conditions\n
!!     * input.dat      input data for the calculation
!!                      (initial condition, problem, numeric, compute parameters, ...)\n
!!     
!> \author Romain Buttay
!! King Abdullah University of Science and Technology\n
!! Thuwal, Saudi Arabia

program WIND


  use parameters
  use input
  use adim
  use parallel
  use weno
  use deriv
  use tools
  use ICs
  use solver
  use cudafor
  use cuda_parallel
  

  implicit none

  type (inp_type)                                        :: inp
  type (adi_type)                                        :: adi
  type (inp_grid)                                        :: grid

  real (dp) , allocatable , dimension (:,:,:,:)          :: v
  real (dp) , allocatable , dimension (:,:,:)            :: T
  ! LES
  real (dp) , allocatable , dimension (:,:,:)            :: mu_SGS

  real (dp)                                              :: f_x 
  
  ! number of iterations in time
  integer (ip)                                           :: ok , ite , nb_restart , nb_stat
  ! time measurement
  integer   , dimension (8)                              :: valeurs
  real (dp)                                              :: t_wall , t_par , t_tmp1 , t_tmp2 , t_in_loop , t_out_loop
  real (dp)                                              :: time , dtmin 
  real (dp) , dimension (4)                              :: dt_4
  logical                                                :: loop , write_stat , existed
  character (len_default)                                :: adr_file
  character (len_default) , parameter                    :: format_times      = '(I8,1X,10(1X,1PE18.8))' ,&
                                                            format_times_head = '(A8,1X,10(1X,A18))'

  
  tcomm = 0.0_dp

  
  ! Check if the file_stop exists before
  inquire ( file = trim (file_stop) , exist = existed )
  if (existed) then
     open  ( unit = unit_stop , file = trim (file_stop) )
     close ( unit = unit_stop , status = "delete" )
  end if
  existed = .false.

   ! MPI (Message Passing Interface : for parallel computing) initialisation
!call init_mpi
   ! replaced by CUDA

   ! CUDA initialisation
   call initialize_cuda

  ! CREAMS version and date
  if ( rank == rank_default ) then
     write (*,*)
     write (*,*) '============================'
     write (*,*) 'WIND v2.1.0'
     write (*,*) 'DNS/LES compressible WENO Version'
     call date_and_time ( values = valeurs )
     print " (a ,2( i2 .2 , a ) , i4 ,a ,3( i2 .2 , a ) , a ) " , &
              " " , valeurs (3) , "/" , valeurs (2) , "/" , valeurs (1) , & ! date
              " " , valeurs (5) , ":" , valeurs (6) , ":" , valeurs (7)     ! time
     write (*,*) '============================'
     write (*,*)
  end if 
  
  ! useful constants
  call constants ( adi )
  !ok
    
  ! read file input.dat
  call readinp ( adi , inp )
  ! maybe ok

  ! read file grid.dat
  call readgrid ( adi , grid )
  ! maybe ok

  ! create MPI topology
  call topology
  ! may not needed,but I don't know how to do it in CUDA

  ! index for every subdomain
  call subdomain
  ! define sx,sy,sz,ex,ey,ez
  ! allocated dynamically by MPI, corresponding to CUDA x/y/z thread
  
  ! looking for neighboors
  call neighborhood
  ! 

  ! evaluation of the computational mesh and metrics
  call metrics ( grid % xt   , grid % yt   , grid % zt   , &
                 grid % x    , grid % y    , grid % z    , &
                 grid % dx_i , grid % dy_i , grid % dz_i , &
                 grid % delta                              )
  
  ! read external input data from the file syntturb.dat
  !call readinpext ( adi , grid , inp )

  ! create necessary repertories to save datas
  if ( rank == rank_default ) call createrep (inp)

  ! creation of derivated types for communication
  call type_conserved
  if (vis) then
     call type_derivative
     if (LES) call type_derivative_SGS
  end if
  
  ! definition of WENO parameters
  call wenopar ( inp % opt , inp % optord )

  ! prepare the stats
  if (inp % stat) then
     call locate_stats ( inp , adi , grid )
  end if

  if ( inp % nprobes > 1 ) then
     call locate_probes ( inp , adi , grid )
  end if

  ! opening probes files
  call open_probes ( inp , adi , grid )

  ! opening the time files to store the iterations, time and dtmin
  if ( rank == rank_default ) then

     adr_file = trim (dir_parent) // trim (file_time_rest)
     open ( unit = unit_time_rest , file = adr_file , status = 'new' , iostat = ok )
     if ( ok /= 0 ) call abort_mpi ('ERROR opening ' // trim (adr_file))
     close (unit_time_rest)

     adr_file = trim (dir_parent) // trim (file_time_stat)
     open ( unit = unit_time_stat , file = adr_file , status = 'new' , iostat = ok )
     if ( ok /= 0 ) call abort_mpi ('ERROR opening ' // trim (adr_file))
     close (unit_time_stat)

  end if

  ! initializing some parameters
  if ( inp % read_restart ) then
     nb_stat    = inp % number_stat
     nb_restart = inp % number_restart
  else
     nb_stat    = 0
     nb_restart = 0
  end if
  time  = inp % initial_time
  dtmin = 1.0_dp
  dt_4  = 1.0_dp
  if ( inp % ini_sol ) then
     loop = .false.
     nb_restart = -1
  else
     loop = .true.
  end if
  write_stat = .false.


  ! initialisation of the solution
!  call init_klein_random_field ( inp )
!  call init_perturbation ( inp )

  if (inp % read_restart) then
     call read_restart ( inp , adi , time , grid , T , v )
  else
     if ( rank == rank_default ) write (*,*) 'initializing the problem: ', trim (inp % init)
     call init_selector ( inp , adi , grid , T , v )
  end if


  if ( rank == rank_default .and. loop ) write (*,*) 'entering the main loop ...'
  if ( rank == rank_default .and. loop ) write (*,format_times_head) &
                                         'ite' , 'time' , 'dtmin' ,     &
                                         'dt_CFL*' , 'dt_mass_diff*' , 'dt_therm_diff*' , 'dt_chem*'

  
 ! taking the times
  t_in_loop = MPI_WTIME()
  t_wall    = t_in_loop
  t_tmp1    = t_in_loop
  t_tmp2    = time
  tcomm     = 0.0_dp
  t_par     = tcomm

  allocate ( mu_SGS ( sx-ng:ex+ng , sy-ng:ey+ng , sz-ng:ez+ng )        , & 
             stat = ok )
  if ( ok > 0 ) call abort_mpi ('error allocate WIND.f90')
  mu_SGS = 0.0_dp

  ! initial body force
!   f_x = f_ini 

  if (rank == rank_default) then
  
     open (unit=123,file='dudy.dat')
     write(123,*)'variables= "time" , "du/dy" , "f_x"'
     close(123)

  end if

  ! main loop
  ite = 0
  do while (loop)

     ite = ite + 1
     if ( inp % itlim .and. ite >= inp % itmax ) then
        loop = .false.
        if ( rank == rank_default ) write (*,*) 'number of iterations has been reached'
     end if

     ! random number evaluation every 1000 time steps
     !if ( ite == 1 .or. mod (ite,1000) == 0 ) call randomize (inp)

     ! calculate time step
     call timestep ( inp , adi , ite , grid , T , v , mu_SGS , dt_4 , dtmin )

     ! modify dtmin to adjust saving times
     if ( time + dtmin > inp % timing (nb_stat+1) .and.   &
          time - dtmin < inp % timing (nb_stat+1) ) then
        dtmin = inp % timing (nb_stat+1) - time
        if (inp % stat) write_stat = .true.
        if ( nb_stat+1 >= inp % nstat ) then
           loop = .false.
           if ( rank == rank_default ) write (*,*) 'number of stat files has been reached'
        end if
     end if

   !   call bodyforce ( inp , adi , grid , v , f_x , dtmin )
     
     call rk3 ( inp , adi , time , dtmin , grid , mu_SGS , T , v , f_x )
     
     time = time + dtmin




     ! For synthetic turbulent generator, shift the bc random field
!     call bc_shift_fill_rfield ( inp )


!     ! clean the exit
!     if ( ndim == 3 .and. mod (ite,1000) == 0 ) call clean_exit ( inp , adi , time , dtmin , x , y , &
!                                                                  z , dx_i , dy_i , dz_i , T , v     )


!     ! write probes files
!     call plot_probes ( time , dtmin , inp , adi , grid , v )


     ! storing stats when conditions satisfy
     if (write_stat) then

        if ( rank == rank_default ) write ( * , format_times ) ite , &
                                    time  , dtmin , dt_4 / dtmin

        ! write probes files
        call plot_probes ( time , dtmin , inp , adi , grid , v )

        nb_stat = nb_stat + 1
      !   call save_stats ( nb_stat , time , dtmin , dt_4 , inp , adi , v )
        if ( mod(nb_stat,1) == 0 ) then 
            call tec_out ( adi , grid , v , nb_stat ) 
            call wall_shearrate ( adi , grid , v , time , f_x )
        end if
        write_stat = .false.

        if ( ndim < 3 ) then ! in 1D and 2D problems store the whole domain
           nb_restart = nb_restart + 1
           call save_restart ( nb_restart , time , dtmin , dt_4 , adi , v )
        end if

     end if


     ! storing restart files at selected iterations
   !   if ( mod (ite,inp % freq_restart) == 0 ) then
   !      nb_restart = nb_restart + 1
   !      call save_restart ( nb_restart , time , dtmin , dt_4 , adi , v )

   !      if ( rank == rank_default ) write (*,format_times_head) &
   !                                 'ite' , 'time' , 'dtmin' ,     &
   !                                 'dt_CFL*' , 'dt_mass_diff*' , 'dt_therm_diff*' , 'dt_chem*'
   !   end if


     ! evaluate times every iteration including savings, etc.
     call mpi_barrier ( MPI_COMM_WORLD , mpicode ) ! to synchronize time for each rank
     t_wall = MPI_WTIME()
     t_par  = t_par + tcomm


     ! show information at the screen
     if ( mod (ite,inp % itshow) == 0 .and. rank == rank_default ) then
        t_tmp1 = t_wall - t_tmp1
        t_tmp2 = time - t_tmp2
        if ( rank == rank_default ) write ( * , format_times ) ite , time , dtmin , &
                                                               dt_4 / dtmin
        call counter ( time / inp % timing (inp % nstat) ,   &
                       t_tmp2 / inp % timing (inp % nstat) , &
                       t_tmp1 , tcomm , t_wall-t_in_loop )
        t_tmp1 = t_wall
        t_tmp2 = time
        tcomm  = 0.0_dp
     end if


     ! cheking the wall time and STOP file every 20 iterations
!     if ( ( t_wall - t_in_loop ) > 0.95_dp * (inp % walltime) ) then
     if ( ( t_wall - t_in_loop ) > inp % walltime ) then
        loop = .false.
        if ( rank == rank_default ) write (*,*) 'walltime has been reached'
     end if
     if ( mod (ite,20) == 0 ) then
        inquire ( file = trim ( file_stop ) , exist = existed )
        if (existed) then
           loop = .false.
           if ( rank == rank_default ) write (*,*) 'request to stop the program'
        end if
     end if

     inquire ( file = 'CFL.inp' , exist = existed )
     if (existed) then
        open ( unit = unit_inp , file = 'CFL.inp' )
           read ( unit_inp , * ) inp % CFL
           if ( rank == rank_default ) write (*,*) 'WARNING: Change CFL value ' , CFL , ' to ' , inp % CFL
           CFL = inp % CFL
        call mpi_barrier ( MPI_COMM_WORLD , mpicode ) ! Wait all procs before to close and delete file
        close ( unit = unit_inp , status = "delete" )
     end if

!     call saving_ascii2 ( time , dtmin , adi , x , y , z , T , v )

  end do ! main loop


  if ( rank == rank_default .and. .not. loop ) write (*,*) 'exit the main loop ...'


  ! measure the loop time
  t_out_loop = MPI_WTIME()

!   close(123)

!  call saving_ascii2 ( time , dtmin , thd , adi , x , y , z , T , W_i , cp , v )
  nb_restart = nb_restart + 1
  call save_restart ( nb_restart , time , dtmin , dt_4 , adi , v )

  ! this is necessary to avoid closing temporal files
  call mpi_barrier ( MPI_COMM_WORLD , mpicode ) ! not usefull anymore ?

  ! closing the temporal files, this is VERY IMPORTANT!
!  call close_probes ( inp , x , y , z )
!  close (unit_saveascii) ! old variable NOT USED anymore.
!  close (unit_time_rest)
!  close (unit_time_stat)


  if ( rank == rank_default ) then
     t_out_loop = t_out_loop - t_in_loop
     t_in_loop  = 100.0_dp * ( 1.0_dp - t_par / t_out_loop )
     write (*,*) 'program finished in ' , t_out_loop / 60.0_dp , ' minutes'
     write (*,*) 'communications time was ' , t_par / 60.0_dp , ' minutes'
     write (*,*) 'average parallel efficiency of ' , t_in_loop , '%'
     write (*,*)
  end if

  deallocate ( v , T , mu_SGS ) ! deallocate initialized variables


  ! MPI exit
  call end_mpi

  
end program WIND
